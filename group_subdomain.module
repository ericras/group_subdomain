<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupContent;

/**
 * Implements hook_help().
 */
function group_subdomain_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.group_subdomain':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Assign subdomains to groups') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_token_info().
 */
function group_subdomain_token_info() {
  $info['tokens']['node']['group_subdomain'] = array(
    'name' => t('Group subdomain path'),
    'description' => t('The subdomain of the organic group the node is in.'),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function group_subdomain_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'node') {
    // for each token passed in
    foreach ($tokens as $name => $original) {
      // if its name is group_subdomain
      switch ($name) {
        case 'group_subdomain':
          // if the node data is set in the options
          if (isset($data['node'])) {
            // need to get the organic group that this node belongs to
            // this is in the node__og_audience table
            // we get the first group audience defined
            $og_audience_value = $data['node']->og_audience->getValue();
            if (is_array($og_audience_value) && count($og_audience_value) > 0 && array_key_exists('target_id', $og_audience_value[0])) {
              // this is a member of a group
              $group_id = $og_audience_value[0]['target_id'];

              # find the node with this id, and replace the key with its subdomain
              if ($group_id != NULL) {
                $group_node = Node::load($group_id);
                if (!empty($group_node)) {
                  $replacements[$original] = $group_node->group_subdomain->getValue()[0]['value'];
                }
              }
            }
            else {
              // this could be a group/site itself. Check if it is
              if (!empty($subdomain = $data['node']->group_subdomain->getValue()[0]['value'])) {
                $replacements[$original] = $subdomain;
              }
            }
          }
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_link_alter().
 * @param $variables The variables to alter. (text, url, options)
 */
function group_subdomain_link_alter(&$variables) {
  // get the global base url out
  global $base_url;

  // find the route we are looking at rendering here
  $url = $variables['url'];
  $internal_path = $url->getInternalPath();

  // if it is a node route, get the group that this node belongs to
  $matches = array();
  if (preg_match('/^node\/(\d+)$/', $internal_path, $matches)) {
    $node_id = $matches[1];
    $node = Node::load($node_id);
    if ($node) {
      $group_content_array = GroupContent::loadByEntity($node);
      foreach ($group_content_array as $group_content) {
        $group = $group_content->getGroup();
      }
    }
    if ($group) {
      // this is a member of a group
          $subdomain = \Drupal::service('path.alias_manager')->getAliasByPath('/group/' . $group->id());

          // replace the subdomain in the base URL with this new one
          $split_base_url = explode('.', $base_url);
          $split_start = explode('/', $split_base_url[0]);
          $split_start[count($split_start) - 1] = $subdomain;
          $split_base_url[0] = implode('/', $split_start);
          $new_base_url = implode('.', $split_base_url);

          $variables['options']['base_url'] = $new_base_url;
          $url = $variables['url'];
          $url->setAbsolute();
          $variables['url'] = $url;
          $variables['options']['absolute'] = TRUE;

    }
//    else {
//      // this could be a group/site itself. Check if it is
//      if (!empty($subdomain = $node->group_subdomain->getValue()[0]['value'])) {
//        // replace the subdomain in the base URL with this new one
//        $split_base_url = explode('.', $base_url);
//        $split_start = explode('/', $split_base_url[0]);
//        $split_start[count($split_start) - 1] = $subdomain;
//        $split_base_url[0] = implode('/', $split_start);
//        $new_base_url = implode('.', $split_base_url);
//
//        $variables['options']['base_url'] = $new_base_url;
//        $url = $variables['url'];
//        $url->setAbsolute();
//        $variables['url'] = $url;
//        $variables['options']['absolute'] = TRUE;
//      }
//    }
  }
}
